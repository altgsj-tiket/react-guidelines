{"version":3,"sources":["webpack:///../src/articles/testing/3-parallell-ui-qa-with-storybook/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","storybookDemo","isMDXComponent"],"mappings":"8QASaA,G,UAAe,S,iPAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,kCADR,oCAGA,0DAAyC,iBAAGC,WAAW,IACnD,KAAQ,gDAD6B,QAAzC,sJAGA,kBACE,GAAM,gCADR,gCAGA,8oBACA,6TACA,0RACA,0CAAyB,0BAAYA,WAAW,KAAvB,eAAzB,qBACA,mBAAKC,IAAKC,MACV,sIACA,uBAAK,oBAAMF,WAAW,MAClB,UAAa,uBADZ,+iCAiDL,oNACA,kBACE,GAAM,kBADR,kBAGA,yRACA,kJAAiI,kBAAIA,WAAW,KAAf,OAAjI,8HAA+R,sBAAQA,WAAW,KAAnB,oGAA/R,oKACA,+QACA,kBACE,GAAM,kBADR,kBAGA,iOAAgN,iBAAGA,WAAW,IAC1N,KAAQ,4DADoM,8C,+OAOpNJ,EAAWO,gBAAiB","file":"component---src-articles-testing-3-parallell-ui-qa-with-storybook-index-mdx-62add80cbe40c8627225.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/altgsj/Projects/tiket/TIX-CODE-CONVENTIONS/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport storybookDemo from \"./storybook-demo.gif\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"pfcs--storybook--path-to-bliss\"\n    }}>{`PFCs + Storybook = Path to bliss`}</h1>\n    <p>{`By resorting to primarily writing `}<a parentName=\"p\" {...{\n        \"href\": \"/react-guidelines/testing/pfcs-for-ui-sanity\"\n      }}>{`PFCs`}</a>{`, we can greatly leverage tools like Storybook. We can even write entire pages that can live standalone and disconnected from the rest of the App.`}</p>\n    <h2 {...{\n      \"id\": \"a-great-development-strategy\"\n    }}>{`A great development strategy`}</h2>\n    <p>{`As UI developers some good 80%+ of our time is supposed to be spent on things that can be developed completely disconnected from the rest of the app. As a quick rule of thumb, if you're having to wait for API response times for anything else than final integration tests, you're probably doing it wrong. And I dare to say it's wrong because if we need to have the entire app running so we can test a single component, then we're forfeiting for the best part all of the advantages brought by componentization itself. If not to take full advange of componentization, then we'd probably be better off with Backbone or jQuery, right?`}</p>\n    <p>{`No need for waiting for some data to load from the server. No need to even have a working internet connection. You just need to write stories as you would write test cases. Declare every single possible combination of props to have static equivalents for every single possible rendered state.`}</p>\n    <p>{`It's not an automated process, but bear in mind that UI testing can't be automated with Unit Tests anyway. Then you'll have precisely every single state of your component available to you without the need to be manually triggering the desired state updates.`}</p>\n    <p>{`Check the example `}<inlineCode parentName=\"p\">{`MediaUpload`}</inlineCode>{` component below.`}</p>\n    <img src={storybookDemo} />\n    <p>{`For the blissfull Developer Experiece you see above, all we had to do was declare stories like the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`/// MediaUpload.stories.tsx\nimport React, { useState } from \"react\";\nimport { Story } from \"@storybook/react/types-6-0\";\n\nimport { MediaUpload, MediaUploadProps } from \"./MediaUpload\";\n\nimport { UploadType } from \"components/Uploader\";\n\nconst Template: Story<MediaUploadProps> = (args) => <MediaUpload {...args} />;\n\nexport default {\n  title: \"components/MediaUpload\",\n  component: MediaUpload,\n};\n\nexport const Default = Template.bind({});\n\nDefault.args = {\n  firstLine: \"Image Size\",\n  secondLine: \"300x300 px\",\n  thirdLine: \"Max. file size 2MB\",\n  uploadType: UploadType.Image,\n};\n\nexport const Uploading = Template.bind({});\n\nUploading.args = {\n  ...Default.args,\n  uploading: true,\n};\n\nexport const ForVideo = Template.bind({});\n\nForVideo.args = {\n  firstLine: \"Video resolution\",\n  secondLine: \"Min. 720p\",\n  thirdLine: \"Max. file size 128GB\",\n  uploadType: UploadType.Video,\n};\n\nexport const WithErrors = Template.bind({});\n\nWithErrors.args = {\n  ...Default.args,\n  error: \"The video format is not supported\",\n};\n`}</code></pre>\n    <p>{`That's pretty declarative, easy to write and easy to read. Leveraging Typescript also ensures there's basically not much to actually type, as Intellisense gets pretty smart when using TS.`}</p>\n    <h2 {...{\n      \"id\": \"parallel-ui-qa\"\n    }}>{`Parallel UI QA`}</h2>\n    <p>{`There's another huge bonus of keeping components Pure: Once done developing the UI components, we can setup a Storybook export to enable the QA team to check for styling mismatches and odd behaviour long before the entire application is ready and complete.`}</p>\n    <p>{`If we are careful enough to ensure that say, a page component, can be represented as a collection of PFCs, then it's look `}<em parentName=\"p\">{`and`}</em>{` behavior can be completely tested and validated independently of the rest of the application. No need to setup a backend, `}<strong parentName=\"p\">{`no need to ensure everything works before the QA team can come in and start looking for problems`}</strong>{`. And whenever something is off, the feedback cycle is greatly shortened with more clarity about what specific use cases are failing and what's wrong with them.`}</p>\n    <p>{`It's always going to have to be a human to decide whether or not some screen is pretty enough for a human being. This work isn't deferrable to a machine, then we shouldn't have to write Unit Tests for checking if a color matches the requirements.`}</p>\n    <h2 {...{\n      \"id\": \"moving-forward\"\n    }}>{`Moving forward`}</h2>\n    <p>{`Of course every app needs interaction, and that interaction is what we need to be testing. That's why we need to decouble the functionality we want to test independently of the actual rendering rules. `}<a parentName=\"p\" {...{\n        \"href\": \"/react-guidelines/testing/separating-concerns-with-hooks\"\n      }}>{`We do so by separating the concerns`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}