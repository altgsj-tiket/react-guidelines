{"version":3,"sources":["webpack:///../src/articles/testing/2-pfcs-for-ui-sanity/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","TrafficLights","__position","__code","__scope","Playground","Props","current","isMDXComponent"],"mappings":"+QAUaA,G,UAAe,S,qOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,0CADR,0CAGA,2GACA,4TACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,uBADZ,wEAKL,kEAAiD,0BAAYA,WAAW,KAAvB,YAAjD,6BAAmI,0BAAYA,WAAW,KAAvB,KAAnI,+BAAgN,0BAAYA,WAAW,KAAvB,KAAhN,KACA,uOACA,wDAAuC,0BAAYA,WAAW,KAAvB,iBAAvC,oFACA,kBACE,GAAM,mCADR,mCAGA,YAAC,IAAD,CAAOC,GAAIC,IAAeH,QAAQ,UAClC,kBACE,GAAM,SADR,SAGA,yCAAwB,0BAAYC,WAAW,KAAvB,WAAxB,iDACA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,kCAAqCC,SAAO,GAC7EP,QACAH,kBACAW,eACAC,UACAL,mBAL6E,gBAM7EP,IAN6E,EAO7EH,eAP6E,GAQ5EO,QAAQ,cACb,YAAC,IAAD,CAAeS,QAAQ,MAAMT,QAAQ,mBAEnC,iEACA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,uBADZ,miBAuBL,qBAAG,0BAAYA,WAAW,KAAvB,iBAAH,QAAqE,0BAAYA,WAAW,KAAvB,eAArE,2PACA,8BACE,iBAAGA,WAAW,cAAd,0LAGF,yQACA,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAI,kBAAIA,WAAW,UAAf,+EAEpD,qGACA,kBACE,GAAM,yCADR,0CAGA,oGAAmF,0BAAYA,WAAW,KAAvB,iBAAnF,kSAA+a,0BAAYA,WAAW,KAAvB,UAA/a,iUACA,8BACE,kBAAIA,WAAW,aACb,GAAM,sBADR,uBAGA,iBAAGA,WAAW,cAAa,kBAAIA,WAAW,KAAf,iRAA3B,sBAA2V,iBAAGA,WAAW,IACrW,KAAQ,kEAD+U,wCAA3V,MAIF,mWACA,8BACE,iBAAGA,WAAW,cAAa,kBAAIA,WAAW,KAAf,oEAE7B,gDAA+B,sBAAQA,WAAW,KAAnB,cAA/B,kNACA,qBAAG,sBAAQA,WAAW,KAAI,iBAAGA,WAAW,SAClC,KAAQ,0CADY,yC,mOAO9BJ,EAAWa,gBAAiB","file":"component---src-articles-testing-2-pfcs-for-ui-sanity-index-mdx-eeaffc4d35315ced6080.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/altgsj/Projects/tiket/TIX-CODE-CONVENTIONS/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport { TrafficLights } from \"./TrafficLights\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"pure-function-components-for-ui-sanity\"\n    }}>{`Pure Function Components for UI Sanity`}</h1>\n    <p>{`The greatest strength of React is the ability of using Pure Functional Components.`}</p>\n    <p>{`To understand PFCs, let's first understand Pure Functions. A pure function is a function that, given the same parameters, always returns the same result. The results don't depend on anything but its parameters and it does not only interact with the outside world in any other way different .`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const timesTwo = (value: number) => value * 2;\ntimesTwo(2); // 4\n`}</code></pre>\n    <p>{`It doesn't matter how many times you call `}<inlineCode parentName=\"p\">{`timesTwo`}</inlineCode>{`. As long as the input is `}<inlineCode parentName=\"p\">{`2`}</inlineCode>{`, the output will always be `}<inlineCode parentName=\"p\">{`4`}</inlineCode>{`.`}</p>\n    <p>{`In React, Pure Functional Components (from now on just \"PFCs\") are components that simply take the props passed down to them and render the UI state based on them. That's precisely what React is all about.`}</p>\n    <p>{`Below we have a test Component, `}<inlineCode parentName=\"p\">{`TrafficLights`}</inlineCode>{`, with a very simple set of props and the expected behavior of any traffic light`}</p>\n    <h3 {...{\n      \"id\": \"trafficlights---component-props\"\n    }}>{`TrafficLights - Component Props`}</h3>\n    <Props of={TrafficLights} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <p>{`Try changing the `}<inlineCode parentName=\"p\">{`current`}</inlineCode>{` prop below from \"red\" to \"yellow\" or \"green\"`}</p>\n    <Playground __position={1} __code={'<TrafficLights current=\\\"red\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TrafficLights,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <TrafficLights current=\"red\" mdxType=\"TrafficLights\" />\n    </Playground>\n    <p>{`Now check the simplified implementation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`export const TrafficLights = ({ current }: TrafficLightsProps) => (\n  <div>\n    <TrafficLamp color=\"red\" current={current} />\n    <TrafficLamp color=\"yellow\" current={current} />\n    <TrafficLamp color=\"green\" current={current} />\n  </div>\n);\n\nexport const TrafficLamp = ({ color, current }: TrafficLampProps) => (\n  <div\n    style={{\n      backgroundColor: color,\n      opacity: current === color ? 1 : 0.2,\n      width: \"30px\",\n      height: \"30px\",\n      borderRadius: \"15px\",\n      marginBottom: \"2px\",\n    }}\n  />\n);\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`TrafficLights`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`TrafficLamp`}</inlineCode>{` are both PFCs. The most noticeable thing about them is that they do not own their own state nor they use any kind of hook. They can use all the conditional rendering they want, but they don't get to use anything but the props passed down to them.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE:\nDo not confuse PFCs with React's Memoized components (a.k.a. PureComponents). Those concepts are somewhat similar, but aren't the same thing (nor are they strictly necessary)`}</p>\n    </blockquote>\n    <p>{`The benefit here is that when a component is a PFC, every sigle discrete combination of props leads to a discrete rendered UI state in the output. As no interactions happen inside this component, there's no interaction to test inside of it.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\"><em parentName=\"strong\">{`OMG!!! Are you saying components don't need Unit Tests? That's HERESY!!!`}</em></strong></p>\n    </blockquote>\n    <p>{`For the most part, yes, that's precisely what I'm stating. And I go further:`}</p>\n    <h2 {...{\n      \"id\": \"ui-testing-is-for-humans-not-machines\"\n    }}>{`UI Testing is for Humans, not machines`}</h2>\n    <p>{`Join me for a quick thought experiment. Let's take the component above, the `}<inlineCode parentName=\"p\">{`TrafficLights`}</inlineCode>{` component. Let's say we write tests for it and everything passes. Now imagine that when we reach QA, they ask us to swap the yellow color for orange as it's more clearly visible. If we're gonna be purists, now we're going to have to write tests checking if the color shown when we pass `}<inlineCode parentName=\"p\">{`yellow`}</inlineCode>{` is the right shade of orange, as asked by the product team. Going further, why not write tests to check if the lights are actually circles? Whatever we do, there's always the possibility of having a complete set of painfully written tests that do pass, but still won't reflect correctness nor give you Peace of Mind.`}</p>\n    <blockquote>\n      <h3 parentName=\"blockquote\" {...{\n        \"id\": \"aim-for-confidence\"\n      }}>{`AIM FOR CONFIDENCE.`}</h3>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`\"Test the things that will help you feel confident about your code. It’s easy to fall into the trap of testing everything that is testable, but that’s a rabbit hole you want to avoid. Instead, focus on testing the behaviors on which other parts of your code will rely.\"`}</em>{` (taken from these `}<a parentName=\"p\" {...{\n          \"href\": \"https://chromatichq.com/blog/principles-testdriven-development\"\n        }}>{`Principles of Test driven Develpment`}</a>{`)`}</p>\n    </blockquote>\n    <p>{`Writing automated tests for checking if a UI totally works is hard. Not only hard, but mostly pointless, as it's just dupplicated work that a human will have to do aftwerwards anyway. And now we introduce a second layer of possible coding mistakes and an additional opportunity for requirement miscomunication. Then Why bothering?`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><em parentName=\"p\">{`\"HELL YEAH!!! ANARCHY!!! TESTS ARE A POINTLESS WASTE OF TIME!\"`}</em></p>\n    </blockquote>\n    <p>{`Hold your horses there, `}<strong parentName=\"p\">{`THAT'S NOT`}</strong>{` what I'm saying. We're not forfeiting testing the UI, we're just leaving testing UI for correctness to who will must do it anyway. When you do it, you unlock one of the greatest advantages of modern React:`}</p>\n    <p><strong parentName=\"p\"><a parentName=\"strong\" {...{\n          \"href\": \"/testing/parallel-ui-qa-with-storybook\"\n        }}>{`Parallel UI QA with Storybook`}</a></strong></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}