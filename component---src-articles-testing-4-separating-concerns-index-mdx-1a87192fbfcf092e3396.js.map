{"version":3,"sources":["webpack:///../src/articles/testing/4-separating-concerns/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","Playground","CounterUI","useCounterController","counter","setCounter","onClick","isMDXComponent"],"mappings":"6RAYaA,G,UAAe,S,sOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,kBACE,GAAM,2CADR,4CAGA,0EAAyD,0BAAYC,WAAW,KAAvB,WAAzD,wCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,oVAAqVC,SAAO,GAC7XL,QACAH,kBACAS,oBACAC,eACAC,cACAC,0BAN6X,gBAO7XZ,IAP6X,EAQ7XH,eAR6X,GAS5XO,QAAQ,eACZ,WAAM,MAC6BK,mBAAS,GAAhCI,EADN,KACeC,EADf,KAOD,OAAO,uBACP,sBAAQC,QAHS,kBAAMD,GAAW,SAAAD,GAAO,OAAIA,EAAU,OAGvD,KACA,wBAAOA,GACP,sBAAQE,QAPS,kBAAMD,GAAW,SAAAD,GAAO,OAAIA,EAAU,OAOvD,SAIJ,kBACE,GAAM,sBADR,sBAGA,4GACA,uBAAK,oBAAMR,WAAW,MAClB,UAAa,uBADZ,kbAuBL,2EAA0D,0BAAYA,WAAW,KAAvB,YAA1D,OAAsH,0BAAYA,WAAW,KAAvB,YAAtH,kBAA6L,0BAAYA,WAAW,KAAvB,gBAA7L,mXAAymB,sBAAQA,WAAW,KAAnB,gIAAzmB,iDACA,kBACE,GAAM,+BADR,+BAGA,uFAAsE,0BAAYA,WAAW,KAAvB,kBAAtE,+HACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,miBAwBL,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,eAA3B,kBAA6F,0BAAYA,WAAW,KAAvB,gCAA7F,qEAA2O,sBAAQA,WAAW,KAAnB,UAA3O,qKAA0b,0BAAYA,WAAW,KAAvB,cAA1b,2FAEF,kBACE,GAAM,mBADR,mBAGA,gCAAe,0BAAYA,WAAW,KAAvB,WAAf,wCACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,kQAYL,gEACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kDAAmDC,SAAO,GAC3FL,QACAH,kBACAS,oBACAC,eACAC,cACAC,0BAN2F,gBAO3FZ,IAP2F,EAQ3FH,eAR2F,GAS1FO,QAAQ,eAAc,kBAAM,YAAC,IAAD,eAAeQ,cAAf,CAAuCR,QAAQ,kBAC9E,iPAAgO,iBAAGC,WAAW,IAC1O,KAAQ,2CADoN,uCAAhO,mBAGA,kBACE,GAAM,8BADR,8BAGA,+JAA8I,kBAAIA,WAAW,KAAf,YAAgC,sBAAQA,WAAW,MAAnB,SAA9K,QAAqO,kBAAIA,WAAW,KAAf,uBAA2C,sBAAQA,WAAW,MAAnB,QAAhR,gGACA,oJAAmI,0BAAYA,WAAW,KAAvB,SAAnI,iIACA,8BACE,iBAAGA,WAAW,cAAd,gJ,oOAMNJ,EAAWe,gBAAiB","file":"component---src-articles-testing-4-separating-concerns-index-mdx-1a87192fbfcf092e3396.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/altgsj/Projects/tiket/TIX-CODE-CONVENTIONS/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from \"react\";\nimport { Playground } from \"docz\";\nimport { CounterUI } from \"./CounterUI\";\nimport { useCounterController } from \"./useCounterController\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"separating-concerns-hooks-to-the-rescue\"\n    }}>{`Separating Concerns: Hooks to the Rescue`}</h1>\n    <p>{`First of all, let's take a second and revisit the `}<inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` component in our very first example`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [counter, setCounter] = useState(0)\\n  const increase = () => setCounter(counter => counter + 1)\\n  const decrease = () => setCounter(counter => counter - 1)\\n  return (\\n    <div>\\n      <button onClick={decrease}>-</button>\\n      <span>{counter}</span>\\n      <button onClick={increase}>+</button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      CounterUI,\n      useCounterController,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [counter, setCounter] = useState(0);\n\n        const increase = () => setCounter(counter => counter + 1);\n\n        const decrease = () => setCounter(counter => counter - 1);\n\n        return <div>\n        <button onClick={decrease}>-</button>\n        <span>{counter}</span>\n        <button onClick={increase}>+</button>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"extracting-the-pfc\"\n    }}>{`Extracting the PFC`}</h2>\n    <p>{`To make it properly testable, let's first extract all of the JSX into it's own PFC:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Counter/UI.tsx => (.TSX) This is important\nimport React from \"react\";\n\nexport type CounterUIProps = {\n  currentValue: number;\n  increase: () => void;\n  decrease: () => void;\n};\n\nexport const CounterUI = ({\n  currentValue,\n  decrease,\n  increase,\n}: CounterUIProps) => (\n  <div>\n    <button onClick={decrease}>-</button>\n    <span>{currentValue}</span>\n    <button onClick={increase}>+</button>\n  </div>\n);\n`}</code></pre>\n    <p>{`Notice how everything the UI needs is functions to `}<inlineCode parentName=\"p\">{`decrease`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`increase`}</inlineCode>{` the counter's `}<inlineCode parentName=\"p\">{`currentValue`}</inlineCode>{`. It doesn't really matter to the UI if when someone clicks the increment button it gets incremented by one or by a thousand. Or if it's updated at all. It simply cares about rendering based in the props passed down, nothing else. That's React enabling the Single Responsability Principle (aka Separation of Concerns) at it's prime. UI handles display, and that's it. `}<strong parentName=\"p\">{`Notice how this component has no room for errors apart from the ones that can be caught early at development or later at QA.`}</strong>{` There's absolutely nothing to Unit Test here`}</p>\n    <h2 {...{\n      \"id\": \"extract-the-controller-hook\"\n    }}>{`Extract the Controller Hook`}</h2>\n    <p>{`If by some reason you happen to think that having to write the `}<inlineCode parentName=\"p\">{`CounterUIProps`}</inlineCode>{` type alias is cumbersome, notice how neatly it becomes a perfect contract between the component and it's controlling hook:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Counter/useCounterController.ts => (.TS) This is important!\nimport { CounterUIProps } from \"./CounterUI\";\n\nexport const useCounterController = (\n  initialValue = 0,\n  increment = 1\n): CounterUIProps => {\n  const [currentValue, setCurrentValue] = useState(initialValue);\n\n  const increase = () =>\n    setCurrentValue((currentValue) => currentValue + increment);\n\n  const decrease = () =>\n    setCurrentValue((currentValue) => currentValue - increment);\n\n  return {\n    currentValue,\n    increase,\n    decrease,\n  };\n};\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Please Note`}</strong>{`: The proposed `}<inlineCode parentName=\"p\">{`use<ComponentName>Controller`}</inlineCode>{` convention is just that, a proposal. The \"Controller\" part of it `}<strong parentName=\"p\">{`IS NOT`}</strong>{` a silly attempt of reviving the old school MVC pattern. This is a Controller in the sense it's what \"controls\" the behavior of the UI. Of course we can replace `}<inlineCode parentName=\"p\">{`Controller`}</inlineCode>{` for whatever makes more sense for the team, but I've seen it used in the wild before.`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"blundling-it-up\"\n    }}>{`Blundling it up`}</h2>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`Counter`}</inlineCode>{` component can be written like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Counter/index.tsx\nimport React from \"react\";\n\nimport { useCounterController } from \"./useCounterController\";\nimport { CounterUI } from \"./CounterUI\";\n\nconst Counter = () => <CounterUI {...useCounterController()} />;\n\nexport default Counter;\n`}</code></pre>\n    <p>{`Yes, it does work. Check this baby out!`}</p>\n    <Playground __position={1} __code={'() => <CounterUI {...useCounterController()} />'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      CounterUI,\n      useCounterController,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">{() => <CounterUI {...useCounterController()} mdxType=\"CounterUI\" />}</Playground>\n    <p>{`Hopefully we already agree that the UI should be tested by a person through Storybook, right? Now, do you see how easy it is now to actually test the code that matters for the counter? By doing so, we've just enabled `}<a parentName=\"p\" {...{\n        \"href\": \"/react-guidelines/testing/testing-hooks\"\n      }}>{`direct testing of the functionality`}</a>{` we want tested`}</p>\n    <h2 {...{\n      \"id\": \"reasons-for-splitting-code\"\n    }}>{`Reasons for splitting code`}</h2>\n    <p>{`If you've been paying close attention, you'll notice that I've explicitly told you to watch out for the fact that we are splitting the `}<em parentName=\"p\">{`CounterUI`}<strong parentName=\"em\">{`.tsx`}</strong></em>{` and `}<em parentName=\"p\">{`useCounterController`}<strong parentName=\"em\">{`.ts`}</strong></em>{` files each into their own separate files. Now notice how that the extensions are different.`}</p>\n    <p>{`The reason for that is to make dead simple to exclude JSX-only code from the unit testing pipeline. A simple removal of the `}<inlineCode parentName=\"p\">{`*.tsx`}</inlineCode>{` extension from the jest matching pattern will be enough to ensure the coverage reports only refers to what actually matters.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`I'm pretty sure there must be a better way to exclude PFCs from coverage reports. If you know how to do it, your PR is always welcome`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}