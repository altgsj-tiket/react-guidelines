{"version":3,"sources":["webpack:///../src/articles/testing/1-intro/1-intro.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","Playground","counter","setCounter","onClick","data-test-id","isMDXComponent"],"mappings":"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","file":"component---src-articles-testing-1-intro-1-intro-mdx-04ff075edb5cd265925a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/altgsj/Projects/tiket/TIX-CODE-CONVENTIONS/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from \"react\";\nimport { Playground } from \"docz\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"why-do-you-test\"\n    }}>{`Why do you test?`}</h1>\n    <h3 {...{\n      \"id\": \"for-the-peace-of-mind\"\n    }}>{`For the Peace of Mind`}</h3>\n    <p>{`That's it, that's why we test. Everything else boils down to this. We write Test to our code so we don't get waken up at 3 a.m. with dire news about something breaking somewhere critical. This is as far as I'll go. If you `}<em parentName=\"p\">{`DO`}</em>{` need to be convinced about why Unit Tests are good, `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.google.com/search?q=why+unit+testing+is+important&oq=why+unit+testing+is+important&aqs=chrome..69i57j0i19i22i30l3.498j0j4&sourceid=chrome&ie=UTF-8\"\n      }}>{`get out of that cave now by clicking here`}</a>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`IMPORTANT`}</strong>{`: If you test just to show off how many layers of abstraction you're able to handle to manage a jungle of loosely tied tests, `}<a parentName=\"p\" {...{\n          \"href\": \"https://chromatichq.com/blog/principles-testdriven-development\"\n        }}>{`please stop right now`}</a>{`.`}</p>\n    </blockquote>\n    <p>{`Once we're past that, let me ask you a simple question`}</p>\n    <h2 {...{\n      \"id\": \"has-your-testing-got-you-any-peace-of-mind-recently\"\n    }}>{`Has your testing got you any Peace of Mind, recently?`}</h2>\n    <p>{`Most React testing I've seen done in the wild isn't even close to beeing enough to ensure the much desired peace of mind we all are looking for. To achieve it, we need to have 100% code coverage for what matters, and be able to rest assured that every single piece of the testing code is properly written. And if that's hard enough said, it's way worse when you actually try to do it.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`As a quick rule of thumb, TDD isn't supposed to make you suffer. If you're having to increase the complexity of your code so it can be testable and it's still not thoroughly tested, then what's the point of testing in the first place. Testing was supposed to bring us happiness, not to suck every bit of energy out of our bodies...`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"quick-example\"\n    }}>{`Quick example`}</h3>\n    <p>{`Let's resort to the classic case of a Counter, as written below.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [counter, setCounter] = useState(0)\\n  const increase = () => setCounter(counter => counter + 1)\\n  const decrease = () => setCounter(counter => counter - 1)\\n  return (\\n    <div>\\n      <button onClick={decrease}>-</button>\\n      <span>{counter}</span>\\n      <button onClick={increase}>+</button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [counter, setCounter] = useState(0);\n\n        const increase = () => setCounter(counter => counter + 1);\n\n        const decrease = () => setCounter(counter => counter - 1);\n\n        return <div>\n        <button onClick={decrease}>-</button>\n        <span>{counter}</span>\n        <button onClick={increase}>+</button>\n      </div>;\n      }}\n    </Playground>\n    <p>{`Now, how are we supposed to test this component? If you follow almost every single tutorial on the internet, you may be readying yourself to start adding `}<inlineCode parentName=\"p\">{`data-test-id`}</inlineCode>{` props everywhere, just so we can reference the rendered elements to simulate clicks or check their content...`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [counter, setCounter] = useState(0)\\n  const increase = () => setCounter(counter => counter + 1)\\n  const decrease = () => setCounter(counter => counter - 1)\\n  return (\\n    <div>\\n      <button data-test-id=\\\"decrement\\\" onClick={decrease}>\\n        -\\n      </button>\\n      <span data-test-id=\\\"result\\\">{counter}</span>\\n      <button data-test-id=\\\"increment\\\" onClick={increase}>\\n        +\\n      </button>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [counter, setCounter] = useState(0);\n\n        const increase = () => setCounter(counter => counter + 1);\n\n        const decrease = () => setCounter(counter => counter - 1);\n\n        return <div>\n        <button data-test-id=\"decrement\" onClick={decrease}>\n          -\n        </button>\n        <span data-test-id=\"result\">{counter}</span>\n        <button data-test-id=\"increment\" onClick={increase}>\n          +\n        </button>\n      </div>;\n      }}\n    </Playground>\n    <p>{`Then the testing code could be something like the code below`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import React from \"react\";\nimport {\n  fireEvent,\n  render,\n  screen,\n  getAllByTestId,\n} from \"@testing-library/react\";\n\nimport Counter from \"./Counter\";\n\ndescribe(\"Component: Counter\", () => {\n  it(\"Works properly\", () => {\n    render(<Counter />);\n\n    const decrease = getAllByTestId(\"decrease\");\n    const increase = getAllByTestId(\"increase\");\n    const result = getAllByTestId(\"result\");\n\n    fireEvent.click(increase);\n\n    expect(result.innerHTML).toEqual(\"1\");\n\n    fireEvent.click(decrease);\n\n    expect(result.innerHTML).toEqual(\"0\");\n  });\n});\n`}</code></pre>\n    <p>{`Althought such a simple component wouldn't be that hard to test, notice how we need, just for achieving the simplest of the checks, to instrument the code. Those pesky `}<em parentName=\"p\"><inlineCode parentName=\"em\">{`data-test-id`}</inlineCode></em>{` serve no purpose other than making tests possible. But the very concept of having to somehow modify the code so we can test it contradicts one of the basic principles of TDD: `}<em parentName=\"p\">{`Tested code shouldn't care how it's gonna be tested`}</em>{`. That's precisely what's happening here, or else the test wouldn't be possible.`}</p>\n    <p>{`As if it's not crazy enough that we need to actually render a component to check if a simple function execution behaves properly, I must remind you that the change is not always as straigtforward to test as a string inside an arbitrary container. Many times the effect of changing a prop is as subtle as an animation. Soon enough we end up having to write tests for checking for css class names and for the presence of css styles. Then someone changes a color, or the name of a prop in a component and then the project gets littered with small, unrelated changes to prevent a ton of falsely failing tests (false negatives). Or even worse: Some functionality stops working, but the assertion was too wide and now we get a falsely successful test (false positives).`}</p>\n    <p>{`If we are to be testing in such a fragile environment, then why are we bothering to test at all? Testing is just creating more places for code to break. We test to achieve peace of mind, but writing tests with React has traditionally led to anything but it.`}</p>\n    <p>{`The problem is that we've mostly stopped testing JS function execution and started testing solely React Components. Testing JS code is easy, but testing React Components and all of its intricacies is pretty hard. Worse: very few projects and teams have both available manpower and the skillset needed to write a complete set of Component Tests. Furthermore, `}<strong parentName=\"p\">{`let me dare to say`}</strong>{` that `}<strong parentName=\"p\">{`most teams`}</strong>{` and projects `}<strong parentName=\"p\">{`DO NOT NEED`}</strong>{` a complete set of Component tests.`}</p>\n    <p>{`Are you provoked yet? Bear with me a little longer...`}</p>\n    <h2 {...{\n      \"id\": \"stop-testing-react\"\n    }}>{`Stop testing React`}</h2>\n    <p>{`The spirit of TDD is `}<strong parentName=\"p\">{`TESTING THE FUNCTIONALITY`}</strong>{`, not necessarily testing every single line of written code. Not all the code needs to be tested so you can achieve peace of mind.`}</p>\n    <p>{`Take a minute take a good look at the example above. Notice that whenever we assert the internal state of an element to check for proper interaction hebavior (like we do with `}<inlineCode parentName=\"p\">{`expect(result.innerHTML).toEqual(\"1\")`}</inlineCode>{`) we're not only testing for the expected behavior, but also testing if React is actually doing what it's supposed to do and putting the value in the expected location. Do we really need to be spending time to test if React is being `}<em parentName=\"p\">{`Reacty`}</em>{`? React already has `}<a parentName=\"p\" {...{\n        \"href\": \"https://circleci.com/gh/facebook/react\"\n      }}>{`it's own tests`}</a></p>\n    <h3 {...{\n      \"id\": \"dont-try-to-automate-what-cant-be-automated\"\n    }}>{`Don't try to automate what can't be automated`}</h3>\n    <p>{`Checking a button's color or if it's correctly wired to a callback is something that will have to go through human testing anyway. We should be way more worried about asserting function execution results than trying to assert correctness through loosely inspecting the rendered result.`}</p>\n    <p>{`Because let's face it: JSX is declarative and pretty straightforward, not much that can go wrong there that the IDE or the linter won't warn you. Even in the worst case scenario, a callback that isn't properly wired will be pretty obvious when we click something that doesn't work, and that's just part of the normal development testing cycle. Now, most of the real problems we end up facing are related to the hooks at the top, where we actualy weave together the fabric of the interactions between each and every component.`}</p>\n    <h2 {...{\n      \"id\": \"hooks-to-the-rescue\"\n    }}>{`Hooks to The Rescue`}</h2>\n    <p>{`Now Hooks are just plain functions, and therefore super easy to test. `}<strong parentName=\"p\">{`The very reason for the existance of Hooks`}</strong>{` is to enable us to `}<em parentName=\"p\">{`\"`}<a parentName=\"em\" {...{\n          \"href\": \"https://reactjs.org/docs/hooks-intro.html#its-hard-to-reuse-stateful-logic-between-components\"\n        }}>{`extract stateful logic from a component so it can be tested independently and reused`}</a>{`\"`}</em>{`, effectively decoupling UI rendering from business logic while `}<a parentName=\"p\" {...{\n        \"href\": \"https://mostly-adequate.gitbook.io/mostly-adequate-guide/\"\n      }}>{`mostly adhering to the functional paradigm`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"strategy-overview\"\n    }}>{`Strategy overview`}</h2>\n    <p>{`So the overview of the strategy is pretty simple:`}</p>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"/react-guidelines/testing/pfcs-for-ui-sanity\"\n        }}>{`Write pure functional components for UI sanity`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"/react-guidelines/testing/parallel-ui-qa-with-storybook\"\n        }}>{`Move plain UI testing to Storybook`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"/react-guidelines/testing/separating-concerns-with-hooks\"\n        }}>{`Separate the concerns by using hooks`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"/react-guidelines/testing/testing-hooks\"\n        }}>{`Unit Testing interactions`}</a></li>\n      <li parentName=\"ol\">{`Then what's the `}<inlineCode parentName=\"li\">{`react-testing-library`}</inlineCode>{` good for?`}</li>\n    </ol>\n    <p>{`Whatever happens, always remember: Tests are supposed to make our jobs more fun. If we experience anything but bliss, then we're probably doing it wrong, and there must be a better, more sane way.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}